services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nginx-love-postgres
    hostname: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-nginx_waf}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
      - ./docker/database.sql:/docker-entrypoint-initdb.d/01-database.sql:ro
      - ./apps/api/prisma/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - nginx-love-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-nginx_waf}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API Service
  backend:
    image: vouu/nginx-waf-backend:ubuntu2404
    restart: unless-stopped
    container_name: nginx-love-backend
    network_mode: host
    hostname: backend
    # ports:
    #   - "${API_PORT:-3001}:3001"
    #   - "80:80"
    #   - "443:443"
    #   # add more port for NLB
    environment:
      # Database Configuration
      DATABASE_URL: "postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@localhost:5433/${DB_NAME:-nginx_waf}?schema=public"
      
      # Server Configuration
      PORT: ${API_PORT:-3001}
      NODE_ENV: ${NODE_ENV:-production}
      
      # JWT Configuration
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-07fda7ee-9613-48c3-b8ad-54d56a23445c}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-6dc381ae-88f6-428d-99a7-c1f24a7685ab}
      JWT_ACCESS_EXPIRES_IN: ${JWT_ACCESS_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      
      # CORS Configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:8080,http://localhost:5173}
      
      # Security
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-10}
      
      # Session
      SESSION_SECRET: ${SESSION_SECRET:-ba715a25-ff58-4f06-bb48-4669a27e446f}
      
      # 2FA
      TWO_FACTOR_APP_NAME: ${TWO_FACTOR_APP_NAME:-Nginx WAF Admin}
      
      # SSL Configuration
      SSL_DIR: ${SSL_DIR:-/etc/nginx/ssl}
      ACME_DIR: ${ACME_DIR:-/var/www/html/.well-known/acme-challenge}
      
      # SMTP Configuration
      SMTP_HOST: ${SMTP_HOST:-smtp.example.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-user@example.com}
      SMTP_PASS: ${SMTP_PASS:-change-this-to-random-password}
    volumes:
      - ./data/backup:/var/backups
      - ./data/nginx_modules:/usr/lib/nginx
      - ./data/nginx_conf:/etc/nginx
      - ./data/nginx_logs:/var/log
      - ./data/acme_challenge:/var/www/html/.well-known/acme-challenge
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # networks:
    #   - nginx-love-network
  # Frontend Web Service
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      args:
        - NODE_ENV=${NODE_ENV:-production}
        - VITE_API_URL=${VITE_API_URL:-http://localhost:3001/api}
    container_name: nginx-love-frontend
    restart: unless-stopped
    network_mode: host
    # ports:
    #   - "${WEB_PORT:-8080}:8080"
    # networks:
    #   - nginx-love-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  nginx-love-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
